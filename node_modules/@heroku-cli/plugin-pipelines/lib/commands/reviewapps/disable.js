"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@heroku-cli/command");
const cli_ux_1 = require("cli-ux");
class ReviewappsDisable extends command_1.Command {
    async run() {
        const { flags } = this.parse(ReviewappsDisable);
        // if no flags are passed then the user is disabling review apps
        let disable = !flags.autodeploy && !flags.autodestroy;
        let settings = {
            pull_requests: {
                enabled: !disable,
                auto_deploy: false,
                auto_destroy: false
            }
        };
        if (flags.autodeploy) {
            this.log('Disabling auto deployment...');
            settings.pull_requests.auto_deploy = false;
        }
        if (flags.autodestroy) {
            this.log('Disabling auto destroy...');
            settings.pull_requests.auto_destroy = false;
        }
        cli_ux_1.default.action.start('Configuring pipeline');
        let { body: app } = await this.heroku.get(`/apps/${flags.app}`);
        await this.heroku.patch(`/apps/${app.id}/github`, {
            hostname: 'kolkrabbi.heroku.com',
            body: settings
        });
        cli_ux_1.default.action.stop();
    }
}
ReviewappsDisable.description = 'disable review apps or settings on an existing pipeline';
ReviewappsDisable.examples = [
    '$ heroku reviewapps:disable -p mypipeline -a myapp --autodeploy'
];
ReviewappsDisable.flags = {
    app: command_1.flags.app({ description: 'parent app used by review apps', required: true }),
    pipeline: command_1.flags.pipeline({ required: true }),
    remote: command_1.flags.remote(),
    autodeploy: command_1.flags.boolean({ description: 'disable autodeployments' }),
    autodestroy: command_1.flags.boolean({ description: 'disable automatically destroying review apps' })
};
exports.default = ReviewappsDisable;
